package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:build_test.bzl", "build_test")

load("@rules_ocaml//build:rules.bzl",
     "ocaml_ns_archive",
     "ocaml_module",
     "ocaml_test",
     "ppx_executable",
)

LIBNAME = "ppx-assert-lib"
PPX_ARGS = []
DEPS_1 = [
    "@sexplib//lib/sexplib",
    "@ocaml//str"
]

############################# Aggregates #############################
build_test(
    name       = "ppx_assert_test_lib_test",
    targets  = [
        ":Ppx_assert_test"
    ],
)

ocaml_test(
    name = "ppx_assert_test",
    prologue = [
        ":Ppx_assert_test",
        "@ppx_inline_test//lib/runner/lib",
    ],
    main = "@ppx_inline_test//lib/runner", # ":Runner",
    args = ["inline-test-runner", LIBNAME],
    timeout = "short"
)

######################## Modules & Signatures ########################
ocaml_module(
    name          = "Ppx_assert_test",
    struct        = "ppx_assert_test.ml",
    deps          = DEPS_1,
    ppx           = ":ppx.exe",
    ppx_args      = PPX_ARGS + [
        "-loc-filename", "ppx_assert_test.ml",
        "-inline-test-lib", LIBNAME]
)

###############
ppx_executable(
    name    = "ppx.exe",
    main    = "@ppxlib//lib/runner",
    prologue = [
        "@ppx_compare//lib/ppx_compare",
        "@ppx_sexp_conv//lib/ppx_sexp_conv",
        "@ppx_here//lib/ppx_here",
        "//src:ppx_assert",
        "@ppx_inline_test//lib/ppx_inline_test"
    ],
)
